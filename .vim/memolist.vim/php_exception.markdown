php_exception
===

## [Exception](http://php.net/manual/ja/spl.exceptions.php)

|     |     |     |                                                                                                                                   |note                                                                                                                                                                                                                                                |
| :-- | :-- | :-- | :-------------------------------------------------------------------------------------------------------------------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| [Exception](http://php.net/manual/ja/class.exception.php) (interface [Throwable](http://php.net/manual/ja/class.throwable.php))                  ||||すべてのユーザー例外の基底クラス                                                                                                                                                                                                                    |
|     | [LogicException](http://php.net/manual/ja/class.logicexception.php) (extends [Exception](http://php.net/manual/ja/class.exception.php))     |||プログラムのロジック内でのエラーを表す例外です。 この類の例外が出た場合は、自分が書いたコードを修正すべきです。                                                                                                                                     |
|     |     | [BadFunctionCallException](http://php.net/manual/ja/class.badfunctioncallexception.php)                                                ||未定義の関数をコールバックが参照したり、引数を指定しなかったりした場合にスローされる例外です。                                                                                                                                                      |
|     |     |     | [BadMethodCallException](http://php.net/manual/ja/class.badmethodcallexception.php)                                               |未定義のメソッドをコールバックが参照したり、引数を指定しなかったりした場合にスローされる例外です。                                                                                                                                                  |
|     |     | [DomainException](http://php.net/manual/ja/class.domainexception.php)                                                                  ||定義したデータドメインに値が従わないときにスローされる例外です。                                                                                                                                                                                    |
|     |     | [InvalidArgumentException](http://php.net/manual/ja/class.invalidargumentexception.php)                                                ||引数の型が期待する型と一致しなかった場合にスローされる例外です。                                                                                                                                                                                    |
|     |     | [LengthException](http://php.net/manual/ja/class.lengthexception.php)                                                                  ||長さが無効な場合にスローされる例外です。                                                                                                                                                                                                            |
|     |     | [OutOfRangeException](http://php.net/manual/ja/class.outofrangeexception.php)                                                          ||無効なインデックスを要求した場合にスローされる例外です。 これは、コンパイル時に検出しなければなりません。                                                                                                                                           |
|     | [RuntimeException](http://php.net/manual/ja/class.runtimeexception.php) (extends [Exception](http://php.net/manual/ja/class.exception.php)) |||実行時にだけ発生するようなエラーの際にスローされます。                                                                                                                                                                                              |
|     |     | [OutOfBoundsException](http://php.net/manual/ja/class.outofboundsexception.php)                                                        ||値が有効なキーでなかった場合にスローされる例外です。 これは、コンパイル時には検出できないエラーです。                                                                                                                                               |
|     |     | [OverflowException](http://php.net/manual/ja/class.overflowexception.php)                                                              ||いっぱいになっているコンテナに要素を追加した場合にスローされる例外です。                                                                                                                                                                            |
|     |     | [RangeException](http://php.net/manual/ja/class.rangeexception.php)                                                                    ||プログラムの実行時に範囲エラーが発生したことを示すときにスローされる例外です。                                                                                                                                                                      |
|     |     | [UnderflowException](http://php.net/manual/ja/class.underflowexception.php)                                                            ||空のコンテナ上で無効な操作 (要素の削除など) を試みたときにスローされる例外です。                                                                                                                                                                    |
|     |     | [UnexpectedValueException](http://php.net/manual/ja/class.unexpectedvalueexception.php)                                                ||いくつかの値のセットに一致しない値であった際にスローされる例外です。 これが発生する例としては、ある関数が別の関数をコールしていて、 その関数の返り値が特定の型や値である (そして計算やバッファ関連のエラーがない) ことを想定している場合があります。|

## Enum

ENUM型を導入する事で、引数を制約し、コード内でin_arrayをするのではなく、PHP7の引数宣言段階で制限させる。

* [PHP7で堅牢なコードを書く - 例外処理、表明プログラミング、契約による設計 / PHP Conference 2016 // Speaker Deck](https://speakerdeck.com/twada/php-conference-2016)
* [PHPで列挙型(enum)を作る - Qiita](http://qiita.com/Hiraku/items/71e385b56dcaa37629fe)

## Reference
![PHP7で堅牢なコードを書く - 例外処理、表明プログラミング、契約による設計](http://www.codeproject.com/KB/database/Visual_SQL_Joins/Visual_SQL_JOINS_V2.png)
